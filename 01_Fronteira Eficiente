#Construir Fronteira Eficiente para ações do Ibovespa
#Descrição:
#1- Usar todas as ações da composição atual do Ibovespa
#2- Escolher frequência e janela das cotações (exemplo: dados diários dos últimos 252 dias úteis)
#3- Construir/plotar a fronteira eficiente de ativos arriscados irrestrita (sem restrições de vendas à descoberto)
#4- Construir/plotar a fronteira eficiente de ativos arriscados restrita (com restrições de vendas à descoberto)
#5- Obter a carteira de mínima variância nas duas fronteiras (com e sem restrições de vendas à descoberto)
#6- Obter a carteira de tangência nas duas fronteiras (com e sem restrições de vendas à descoberto; ativo livre de risco = DI na curva)
#7- Construir/plotar a fronteira eficiente com existência do ativo livre de risco e sem restrições de vendas à descoberto dos ativos arriscados
#8- Construir/plotar a fronteira eficiente com existência do ativo livre de risco e com restrições de vendas à descoberto dos ativos arriscados

import yfinance as yf
import datetime
from datetime import timedelta
from pypfopt import expected_returns, risk_models
from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import plotting, constraints
import matplotlib.pyplot as plt
from pandas.tseries.offsets import BDay

#Definir o número de dias úteis para trás
num_days = 252

# Definir a data de término manualmente
end_date = datetime.datetime(2024, 3, 31)

# Definir a data de início como a data há 'num_days' dias úteis
start_date = end_date - BDay(num_days)

def plot_efficient_frontier(start_date, end_date):
    # Lista de tickers do Ibovespa
    tickers_ibov = ['ABEV3.SA','B3SA3.SA','BBAS3.SA', 'BBDC3.SA', 'BBDC4.SA', 'BBSE3.SA']

    # Baixar os dados históricos das ações do Ibovespa
    df_assets = yf.download(tickers_ibov, start=start_date, end=end_date)["Adj Close"]
    
    # Calcular as expectativas de retorno médio
    mu = expected_returns.mean_historical_return(df_assets)
        
    # Calcular a matriz de covariância dos retornos
    S = risk_models.sample_cov(df_assets)
     
    # Criar um novo objeto Efficient Frontier
    ef_assets = EfficientFrontier(mu, S)

    # Plotar as fronteiras eficientes de ativos arriscados irrestrita
    plotting.plot_efficient_frontier(ef_assets, show_assets=True)
    plt.title("Efficient Frontier Unrestricted")
    plt.show()

    # Impor a restrição total à venda a descoberto na fronteira eficiente
    ef_assets.add_constraint(lambda x: x >= 0)

    # Plotar a fronteira eficiente de ativos arriscados restrita
    plotting.plot_efficient_frontier(ef_assets, show_assets=True)
    plt.title("Efficient Frontier with Short Selling Restricted")
    plt.show()

    # Obter a carteira de mínima variância na fronteira sem restrições
    weights_min_var_unrestricted = ef_assets.min_volatility()
    print("Weights of Minimum Variance Portfolio (Unrestricted):")
    print(weights_min_var_unrestricted)

    # Obter a carteira de mínima variância na fronteira com restrições
    weights_min_var_restricted = ef_assets.min_volatility()
    print("Weights of Minimum Variance Portfolio (Restricted):")
    print(weights_min_var_restricted)

    # Dados da carteira de mínima variância
    tickers = list(weights_min_var_unrestricted.keys())
    weights = list(weights_min_var_unrestricted.values())

    # Plotar o gráfico de pizza da carteira de minima variancia irrestrita
    plt.figure(figsize=(8, 8))
    plt.pie(weights, labels=tickers, autopct='%1.1f%%', startangle=140)
    plt.axis('equal')  # Equal aspect ratio assegura que o gráfico de pizza seja circular
    plt.title('Allocation of Minimum Variance Portfolio (Unrestricted)')
    plt.show()

    # Plotar o gráfico de pizza da carteira de minima variancia restrita
    plt.figure(figsize=(8, 8))
    plt.pie(weights, labels=tickers, autopct='%1.1f%%', startangle=140)
    plt.axis('equal')  # Equal aspect ratio assegura que o gráfico de pizza seja circular
    plt.title('Allocation of Minimum Variance Portfolio (Restricted)')
    plt.show()
            
    # Calcular a taxa de retorno esperada do ativo livre de risco
    risk_free_rate = 0.098  #https://www.anbima.com.br/pt_br/informar/curvas-de-juros-fechamento.htm - vértice(252)
    
    # Calcular a matriz de covariância dos retornos
    cov_matrix = df_assets.pct_change().cov()

    # Criar um novo objeto Efficient Frontier com base na matriz de covariância
    ef_assets_with_rf = EfficientFrontier(None, cov_matrix=cov_matrix)


    # Adicionar a restrição total à venda a descoberto na fronteira eficiente com ativo livre de risco
    ef_assets_with_rf.add_constraint(lambda x: x >= 0)

    # Plotar a fronteira eficiente com existência do ativo livre de risco e sem restrições de vendas à descoberto
    plotting.plot_efficient_frontier(ef_assets_with_rf, ef_param=risk_free_rate, show_assets=True)
    plt.title("Efficient Frontier with Risk-Free Asset (Unrestricted)")
    plt.show()


#  tickers_ibov = [
        'ABEV3.SA', 'ALOS3.SA', 'ALPA4.SA', 'ARZZ3.SA', 'ASAI3.SA', 'AZUL4.SA', 'B3SA3.SA',
        'BBAS3.SA', 'BBDC3.SA', 'BBDC4.SA', 'BBSE3.SA', 'BEEF3.SA', 'BHIA3.SA', 'BPAC11.SA', 
        'BRAP4.SA', 'BRFS3.SA', 'BRKM5.SA', 'CCRO3.SA', 'CIEL3.SA', 'CMIG4.SA', 'CMIN3.SA', 
        'COGN3.SA', 'CPFE3.SA', 'CPLE6.SA', 'CRFB3.SA', 'CSAN3.SA', 'CSNA3.SA', 'CVCB3.SA', 
        'CYRE3.SA', 'DXCO3.SA', 'EGIE3.SA', 'ELET3.SA', 'ELET6.SA', 'EMBR3.SA', 'ENEV3.SA', 
        'ENGI11.SA', 'EQTL3.SA', 'EZTC3.SA', 'FLRY3.SA', 'GGBR4.SA', 'GOAU4.SA', 'HAPV3.SA', 
        'HYPE3.SA', 'IGTI11.SA', 'IRBR3.SA', 'ITSA4.SA', 'ITUB4.SA', 'JBSS3.SA', 'KLBN11.SA', 
        'LREN3.SA', 'LWSA3.SA', 'MGLU3.SA', 'MRFG3.SA', 'MRVE3.SA', 'MULT3.SA', 'NTCO3.SA', 
        'PCAR3.SA', 'PETR3.SA', 'PETR4.SA', 'PETZ3.SA', 'PRIO3.SA', 'RADL3.SA', 'RAIL3.SA', 
        'RAIZ4.SA', 'RDOR3.SA', 'RECV3.SA', 'RENT3.SA', 'RRRP3.SA', 'SANB11.SA', 'SBSP3.SA', 
        'SLCE3.SA', 'SMTO3.SA', 'SOMA3.SA', 'SUZB3.SA', 'TAEE11.SA', 'TIMS3.SA', 'TOTS3.SA', 
        'TRPL4.SA', 'UGPA3.SA', 'USIM5.SA', 'VALE3.SA', 'VAMO3.SA', 'VBBR3.SA', 'VIVT3.SA', 
        'WEGE3.SA', 'YDUQ3.SA'
    ]
