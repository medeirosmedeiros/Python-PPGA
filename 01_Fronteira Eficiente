import yfinance as yf
import datetime
from datetime import timedelta
from pypfopt import expected_returns, risk_models
from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import plotting
import matplotlib.pyplot as plt
from pypfopt import discrete_allocation

# Definir as datas de início e fim
start_date = datetime.datetime(2023, 4, 1)
end_date = datetime.datetime(2024, 3, 31)

def plot_efficient_frontier(start_date, end_date, restricted=False):
    # Lista de tickers do Ibovespa
    tickers_ibov = [
        'ABEV3.SA', 'ALOS3.SA', 'ALPA4.SA', 'ARZZ3.SA', 'ASAI3.SA', 'AZUL4.SA', 'B3SA3.SA',
        'BBAS3.SA', 'BBDC3.SA', 'BBDC4.SA', 'BBSE3.SA', 'BEEF3.SA', 'BHIA3.SA', 'BPAC11.SA', 
        'BRAP4.SA', 'BRFS3.SA', 'BRKM5.SA', 'CCRO3.SA', 'CIEL3.SA', 'CMIG4.SA', 'CMIN3.SA', 
        'COGN3.SA', 'CPFE3.SA', 'CPLE6.SA', 'CRFB3.SA', 'CSAN3.SA', 'CSNA3.SA', 'CVCB3.SA', 
        'CYRE3.SA', 'DXCO3.SA', 'EGIE3.SA', 'ELET3.SA', 'ELET6.SA', 'EMBR3.SA', 'ENEV3.SA', 
        'ENGI11.SA', 'EQTL3.SA', 'EZTC3.SA', 'FLRY3.SA', 'GGBR4.SA', 'GOAU4.SA', 'HAPV3.SA', 
        'HYPE3.SA', 'IGTI11.SA', 'IRBR3.SA', 'ITSA4.SA', 'ITUB4.SA', 'JBSS3.SA', 'KLBN11.SA', 
        'LREN3.SA', 'LWSA3.SA', 'MGLU3.SA', 'MRFG3.SA', 'MRVE3.SA', 'MULT3.SA', 'NTCO3.SA', 
        'PCAR3.SA', 'PETR3.SA', 'PETR4.SA', 'PETZ3.SA', 'PRIO3.SA', 'RADL3.SA', 'RAIL3.SA', 
        'RAIZ4.SA', 'RDOR3.SA', 'RECV3.SA', 'RENT3.SA', 'RRRP3.SA', 'SANB11.SA', 'SBSP3.SA', 
        'SLCE3.SA', 'SMTO3.SA', 'SOMA3.SA', 'SUZB3.SA', 'TAEE11.SA', 'TIMS3.SA', 'TOTS3.SA', 
        'TRPL4.SA', 'UGPA3.SA', 'USIM5.SA', 'VALE3.SA', 'VAMO3.SA', 'VBBR3.SA', 'VIVT3.SA', 
        'WEGE3.SA', 'YDUQ3.SA'
    ]

    # Baixar os dados históricos das ações do Ibovespa
    df_assets = yf.download(tickers_ibov, start=start_date, end=end_date)["Adj Close"]
    df_assets = df_assets.dropna()

    # Calcular os retornos diários
    returns = df_assets.pct_change()
    returns = returns.dropna()
    
    # Calcular as expectativas de retorno médio
    mu = expected_returns.mean_historical_return(df_assets)
    
    # Calcular a matriz de covariância dos retornos
    S = risk_models.sample_cov(df_assets)
    
    # Criar um novo objeto Efficient Frontier
    ef_assets = EfficientFrontier(mu, S)
    
    if restricted:
        # Adicionar restrição de vendas à descoberto
        ef_assets.add_constraint(lambda w: w >= 0)
    
    # Plotar a fronteira eficiente de ativos arriscados
    plotting.plot_efficient_frontier(ef_assets, show_assets=True)
    
    # Ajustar os rótulos dos eixos x e y
    plt.xlabel('Volatility')
    plt.ylabel('Return')
    
    # Título do gráfico
    if restricted:
        plt.title('Efficient Frontier of Risky Assets (Restricted)')
    else:
        plt.title('Efficient Frontier of Risky Assets (Unrestricted)')
    
    # Exibir o gráfico
    plt.tight_layout()
    plt.show()
    
    # Calcular a alocação de ativos para a carteira de mínima variância
    ef_assets.min_volatility()
    cleaned_weights = ef_assets.clean_weights()
    
    print("Carteira de Mínima Variância (Restrita):" if restricted else "Carteira de Mínima Variância (Irrestrita):")
    print(cleaned_weights)
    
    # Calcular o retorno e a volatilidade da carteira de mínima variância
    ret_min_var, vol_min_var, _ = ef_assets.portfolio_performance()
    
    # Imprimir os resultados da carteira de mínima variância
    print("Retorno da Carteira de Mínima Variância:", ret_min_var)
    print("Volatilidade da Carteira de Mínima Variância:", vol_min_var)

# Chamar a função para plotar a fronteira eficiente
plot_efficient_frontier(start_date, end_date)

# Chamar a função para plotar a fronteira eficiente restrita
plot_efficient_frontier(start_date, end_date, restricted=True)
